{"id":"node_modules/handsontable/i18n/phraseFormatters/pluralize.mjs","dependencies":[{"name":"/home/zerg/development/handsontable/package.json","includedInParent":true,"mtime":1692375559783},{"name":"/home/zerg/development/handsontable/node_modules/handsontable/package.json","includedInParent":true,"mtime":1692294538787},{"name":"core-js/modules/es.number.is-integer.js","loc":{"line":1,"column":7,"index":7},"parent":"/home/zerg/development/handsontable/node_modules/handsontable/i18n/phraseFormatters/pluralize.mjs","resolved":"/home/zerg/development/handsontable/node_modules/core-js/modules/es.number.is-integer.js"},{"name":"core-js/modules/es.number.constructor.js","loc":{"line":2,"column":7,"index":57},"parent":"/home/zerg/development/handsontable/node_modules/handsontable/i18n/phraseFormatters/pluralize.mjs","resolved":"/home/zerg/development/handsontable/node_modules/core-js/modules/es.number.constructor.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = pluralize;\nrequire(\"core-js/modules/es.number.is-integer.js\");\nrequire(\"core-js/modules/es.number.constructor.js\");\n/**\n * Try to choose plural form from available phrase propositions.\n *\n * @param {Array} phrasePropositions List of phrases propositions.\n * @param {number} pluralForm Number determining which phrase form should be used.\n *\n * @returns {string|Array} One particular phrase if it's possible, list of unchanged phrase propositions otherwise.\n */\nfunction pluralize(phrasePropositions, pluralForm) {\n  var isPluralizable = Array.isArray(phrasePropositions) && Number.isInteger(pluralForm);\n  if (isPluralizable) {\n    return phrasePropositions[pluralForm];\n  }\n  return phrasePropositions;\n}"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":7,"column":0},"source":"node_modules/handsontable/i18n/phraseFormatters/pluralize.mjs","original":{"line":1,"column":0},"name":"require"},{"generated":{"line":7,"column":7},"source":"node_modules/handsontable/i18n/phraseFormatters/pluralize.mjs","original":{"line":1,"column":0}},{"generated":{"line":8,"column":0},"source":"node_modules/handsontable/i18n/phraseFormatters/pluralize.mjs","original":{"line":2,"column":0},"name":"require"},{"generated":{"line":8,"column":7},"source":"node_modules/handsontable/i18n/phraseFormatters/pluralize.mjs","original":{"line":2,"column":0}},{"generated":{"line":9,"column":0},"source":"node_modules/handsontable/i18n/phraseFormatters/pluralize.mjs","original":{"line":3,"column":0}},{"generated":{"line":10,"column":0},"source":"node_modules/handsontable/i18n/phraseFormatters/pluralize.mjs","original":{"line":4,"column":0}},{"generated":{"line":11,"column":0},"source":"node_modules/handsontable/i18n/phraseFormatters/pluralize.mjs","original":{"line":5,"column":0}},{"generated":{"line":12,"column":0},"source":"node_modules/handsontable/i18n/phraseFormatters/pluralize.mjs","original":{"line":6,"column":0}},{"generated":{"line":13,"column":0},"source":"node_modules/handsontable/i18n/phraseFormatters/pluralize.mjs","original":{"line":7,"column":0}},{"generated":{"line":14,"column":0},"source":"node_modules/handsontable/i18n/phraseFormatters/pluralize.mjs","original":{"line":8,"column":0}},{"generated":{"line":15,"column":0},"source":"node_modules/handsontable/i18n/phraseFormatters/pluralize.mjs","original":{"line":9,"column":0}},{"generated":{"line":16,"column":0},"source":"node_modules/handsontable/i18n/phraseFormatters/pluralize.mjs","original":{"line":10,"column":0}},{"generated":{"line":17,"column":0},"source":"node_modules/handsontable/i18n/phraseFormatters/pluralize.mjs","original":{"line":11,"column":15}},{"generated":{"line":17,"column":9},"source":"node_modules/handsontable/i18n/phraseFormatters/pluralize.mjs","original":{"line":11,"column":24},"name":"pluralize"},{"generated":{"line":17,"column":18},"source":"node_modules/handsontable/i18n/phraseFormatters/pluralize.mjs","original":{"line":11,"column":33},"name":"pluralize"},{"generated":{"line":17,"column":19},"source":"node_modules/handsontable/i18n/phraseFormatters/pluralize.mjs","original":{"line":11,"column":34},"name":"phrasePropositions"},{"generated":{"line":17,"column":37},"source":"node_modules/handsontable/i18n/phraseFormatters/pluralize.mjs","original":{"line":11,"column":52}},{"generated":{"line":17,"column":39},"source":"node_modules/handsontable/i18n/phraseFormatters/pluralize.mjs","original":{"line":11,"column":54},"name":"pluralForm"},{"generated":{"line":17,"column":49},"source":"node_modules/handsontable/i18n/phraseFormatters/pluralize.mjs","original":{"line":11,"column":64}},{"generated":{"line":17,"column":51},"source":"node_modules/handsontable/i18n/phraseFormatters/pluralize.mjs","original":{"line":11,"column":66}},{"generated":{"line":18,"column":2},"source":"node_modules/handsontable/i18n/phraseFormatters/pluralize.mjs","original":{"line":12,"column":2}},{"generated":{"line":18,"column":6},"source":"node_modules/handsontable/i18n/phraseFormatters/pluralize.mjs","original":{"line":12,"column":6},"name":"isPluralizable"},{"generated":{"line":18,"column":20},"source":"node_modules/handsontable/i18n/phraseFormatters/pluralize.mjs","original":{"line":12,"column":20}},{"generated":{"line":18,"column":23},"source":"node_modules/handsontable/i18n/phraseFormatters/pluralize.mjs","original":{"line":12,"column":23},"name":"Array"},{"generated":{"line":18,"column":28},"source":"node_modules/handsontable/i18n/phraseFormatters/pluralize.mjs","original":{"line":12,"column":28}},{"generated":{"line":18,"column":29},"source":"node_modules/handsontable/i18n/phraseFormatters/pluralize.mjs","original":{"line":12,"column":29},"name":"isArray"},{"generated":{"line":18,"column":36},"source":"node_modules/handsontable/i18n/phraseFormatters/pluralize.mjs","original":{"line":12,"column":36}},{"generated":{"line":18,"column":37},"source":"node_modules/handsontable/i18n/phraseFormatters/pluralize.mjs","original":{"line":12,"column":37},"name":"phrasePropositions"},{"generated":{"line":18,"column":55},"source":"node_modules/handsontable/i18n/phraseFormatters/pluralize.mjs","original":{"line":12,"column":55}},{"generated":{"line":18,"column":56},"source":"node_modules/handsontable/i18n/phraseFormatters/pluralize.mjs","original":{"line":12,"column":56}},{"generated":{"line":18,"column":60},"source":"node_modules/handsontable/i18n/phraseFormatters/pluralize.mjs","original":{"line":12,"column":60},"name":"Number"},{"generated":{"line":18,"column":66},"source":"node_modules/handsontable/i18n/phraseFormatters/pluralize.mjs","original":{"line":12,"column":66}},{"generated":{"line":18,"column":67},"source":"node_modules/handsontable/i18n/phraseFormatters/pluralize.mjs","original":{"line":12,"column":67},"name":"isInteger"},{"generated":{"line":18,"column":76},"source":"node_modules/handsontable/i18n/phraseFormatters/pluralize.mjs","original":{"line":12,"column":76}},{"generated":{"line":18,"column":77},"source":"node_modules/handsontable/i18n/phraseFormatters/pluralize.mjs","original":{"line":12,"column":77},"name":"pluralForm"},{"generated":{"line":18,"column":87},"source":"node_modules/handsontable/i18n/phraseFormatters/pluralize.mjs","original":{"line":12,"column":87}},{"generated":{"line":18,"column":88},"source":"node_modules/handsontable/i18n/phraseFormatters/pluralize.mjs","original":{"line":12,"column":88}},{"generated":{"line":19,"column":2},"source":"node_modules/handsontable/i18n/phraseFormatters/pluralize.mjs","original":{"line":13,"column":2}},{"generated":{"line":19,"column":6},"source":"node_modules/handsontable/i18n/phraseFormatters/pluralize.mjs","original":{"line":13,"column":6},"name":"isPluralizable"},{"generated":{"line":19,"column":20},"source":"node_modules/handsontable/i18n/phraseFormatters/pluralize.mjs","original":{"line":13,"column":20}},{"generated":{"line":19,"column":22},"source":"node_modules/handsontable/i18n/phraseFormatters/pluralize.mjs","original":{"line":13,"column":22}},{"generated":{"line":20,"column":4},"source":"node_modules/handsontable/i18n/phraseFormatters/pluralize.mjs","original":{"line":14,"column":4}},{"generated":{"line":20,"column":11},"source":"node_modules/handsontable/i18n/phraseFormatters/pluralize.mjs","original":{"line":14,"column":11},"name":"phrasePropositions"},{"generated":{"line":20,"column":29},"source":"node_modules/handsontable/i18n/phraseFormatters/pluralize.mjs","original":{"line":14,"column":29}},{"generated":{"line":20,"column":30},"source":"node_modules/handsontable/i18n/phraseFormatters/pluralize.mjs","original":{"line":14,"column":30},"name":"pluralForm"},{"generated":{"line":20,"column":40},"source":"node_modules/handsontable/i18n/phraseFormatters/pluralize.mjs","original":{"line":14,"column":40}},{"generated":{"line":20,"column":41},"source":"node_modules/handsontable/i18n/phraseFormatters/pluralize.mjs","original":{"line":14,"column":41}},{"generated":{"line":21,"column":2},"source":"node_modules/handsontable/i18n/phraseFormatters/pluralize.mjs","original":{"line":15,"column":2}},{"generated":{"line":22,"column":2},"source":"node_modules/handsontable/i18n/phraseFormatters/pluralize.mjs","original":{"line":16,"column":2}},{"generated":{"line":22,"column":9},"source":"node_modules/handsontable/i18n/phraseFormatters/pluralize.mjs","original":{"line":16,"column":9},"name":"phrasePropositions"},{"generated":{"line":22,"column":27},"source":"node_modules/handsontable/i18n/phraseFormatters/pluralize.mjs","original":{"line":16,"column":27}},{"generated":{"line":23,"column":0},"source":"node_modules/handsontable/i18n/phraseFormatters/pluralize.mjs","original":{"line":17,"column":0}}],"sources":{"node_modules/handsontable/i18n/phraseFormatters/pluralize.mjs":"import \"core-js/modules/es.number.is-integer.js\";\nimport \"core-js/modules/es.number.constructor.js\";\n/**\n * Try to choose plural form from available phrase propositions.\n *\n * @param {Array} phrasePropositions List of phrases propositions.\n * @param {number} pluralForm Number determining which phrase form should be used.\n *\n * @returns {string|Array} One particular phrase if it's possible, list of unchanged phrase propositions otherwise.\n */\nexport default function pluralize(phrasePropositions, pluralForm) {\n  var isPluralizable = Array.isArray(phrasePropositions) && Number.isInteger(pluralForm);\n  if (isPluralizable) {\n    return phrasePropositions[pluralForm];\n  }\n  return phrasePropositions;\n}"},"lineCount":null}},"error":null,"hash":"6818beb0757189910ac0156245de49c4","cacheData":{"env":{}}}